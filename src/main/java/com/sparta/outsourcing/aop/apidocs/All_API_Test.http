@BASE_URL=http://localhost:8080

@USER_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVIiLCJleHAiOjE3Mjc3OTk2ODMsImlhdCI6MTcyNzE5NDg4M30.CCjsqid3SpWne-lkdYayjeGF_iKyDZw9gNwRRcr2AU4

@OWNER_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyIiwicm9sZSI6Ik9XTkVSIiwiZXhwIjoxNzI3Nzk5ODk4LCJpYXQiOjE3MjcxOTUwOTh9.VA1NiryatXJR4IpAc6BfM6NeVCSs0J8NSKNb30B3w7o

@EXPIRED_AUTH_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVIiLCJleHAiOjE3MjcxOTU0MTIsImlhdCI6MTcyNzE5NTQxMn0.4dvKkWAKdvzW6eBcuJ12wd_Ro69aSXyfGHH94yv6YCk

### 동적 로그 레벨 변경 - INFO , DEBUG , ERROR , WARN , TRACE
POST {{BASE_URL}}/log-level/set?level=INFO
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 회원가입 - 고객
POST {{BASE_URL}}/api/signup
Content-Type: application/json

{
  "email" : "test1@mail.com",
  "password" : "abc1234!",
  "userRole" : "USER"
}

### 회원가입 - 사장님
POST {{BASE_URL}}/api/signup
Content-Type: application/json

{
  "email" : "test2@mail.com",
  "password" : "abc1234!",
  "userRole" : "OWNER"
}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 회원 로그인 - 고객
POST {{BASE_URL}}/api/signin
Content-Type: application/json

{
  "email" : "test1@mail.com",
  "password" : "abc1234!"
}

### 회원 로그인 - 사장님
POST {{BASE_URL}}/api/signin
Content-Type: application/json

{
  "email" : "test2@mail.com",
  "password" : "abc1234!"
}

### 회원 탈퇴
DELETE {{BASE_URL}}/api/users
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "password" : "abc1234!"
}

### 가게 등록
POST {{BASE_URL}}/api/stores
Authorization: Bearer {{OWNER_TOKEN}}
Content-Type: application/json

{
  "name": "중화반점",
  "openTime": "08:00",
  "closeTime": "18:00",
  "minPrice": "5000",
  "notice": "가게공지입니다"
}

> {%
client.test("Status code is 200", function() {
client.assert(response.status === 200);
});
%}

### 가게 수정
PUT {{BASE_URL}}/api/stores/1
Authorization: Bearer {{OWNER_TOKEN}}
Content-Type: application/json

{
  "name" : "수정반점",
  "openTime" : "09:00",
  "closeTime" : "19:00",
  "minPrice" : "5000",
  "notice" : "수정된공지입니다"
}

> {%
client.test("Status code is 200", function() {
client.assert(response.status === 200);
});
%}

### 가게 목록 조회
GET {{BASE_URL}}/api/stores?name=중화반점
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 가게 단건 조회
GET {{BASE_URL}}/api/stores/1
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 가게 삭제 - 테스트 일자 진행 시 소프트 딜리트 주의 (필요시 스토어 스테이터스 변경 후 테스트)
DELETE {{BASE_URL}}/api/stores/1
Authorization: Bearer {{OWNER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 광고 등록
POST {{BASE_URL}}/api/stores/1/advertisement
Authorization: Bearer {{OWNER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 메뉴 등록
POST {{BASE_URL}}/api/1/menus
Authorization: Bearer {{OWNER_TOKEN}}
Content-Type: application/json

{
  "menuname": "짜장면",
  "price": 7000
}

> {%
client.test("Status code is 200", function() {
client.assert(response.status === 200);
});
%}

### 메뉴 수정
PUT {{BASE_URL}}/api/stores/1/menus/1
Authorization: Bearer {{OWNER_TOKEN}}
Content-Type: application/json

{
  "menuname": "짬뽕",
  "price": 7000
}

> {%
client.test("Status code is 200", function() {
client.assert(response.status === 200);
});
%}

### 메뉴 삭제 - 테스트 일자 진행 시 소프트 딜리트 주의 (필요시 메뉴 스테이터스 변경 후 테스트)
DELETE {{BASE_URL}}/api/stores/1/menus/1
Authorization: Bearer {{OWNER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 리뷰 생성
POST {{BASE_URL}}/api/reviews
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "orderId": 1,
  "rating": 5,
  "content": "리뷰 내용 예시"
}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 리뷰 조회
GET {{BASE_URL}}/api/reviews/store/1/reviews?ratingMin=1&ratingMax=5
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 주문 생성 - 정상적인 주문 생성 (주문 접수 상태로 생성)
POST {{BASE_URL}}/api/orders
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "storeId": 1,
  "customerId": 1,
  "menuId": 1,
  "totalPrice": 15000,
  "status": "ORDER_PLACED"
}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 201);
    });
%}

### 주문 생성 - 사장님이 주문 생성 시도
POST {{BASE_URL}}/api/orders
Content-Type: application/json
Authorization: Bearer {{OWNER_TOKEN}}

{
  "storeId": 1,
  "customerId": 1,
  "menuId": 1,
  "totalPrice": 15000,
  "status": "ORDER_PLACED"
}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 201);
    });
%}

### 주문 생성 - 상태값이 비어있음
POST {{BASE_URL}}/api/orders
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "storeId": 1,
  "customerId": 1,
  "menuId": 1,
  "totalPrice": 15000,
  "status": ""
}

> {%
    client.test("Status code is 400", function() {
        client.assert(response.status === 400);
    });
%}

### 주문 생성 - 상태값이 ORDER_PLACED가 아님
POST {{BASE_URL}}/api/orders
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "storeId": 1,
  "customerId": 1,
  "menuId": 1,
  "totalPrice": 15000,
  "status": "ORDER_CONFIRMED"
}

> {%
    client.test("Status code is 403", function() {
        client.assert(response.status === 403);
    });
%}

### 주문 생성 - 가게가 존재하지 않음
POST {{BASE_URL}}/api/orders
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "storeId": 999,
  "customerId": 1,
  "menuId": 1,
  "totalPrice": 15000,
  "status": "ORDER_PLACED"
}

> {%
    client.test("Status code is 404", function() {
        client.assert(response.status === 404);
    });
%}

### 주문 생성 - 메뉴가 존재하지 않음
POST {{BASE_URL}}/api/orders
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "storeId": 1,
  "customerId": 1,
  "menuId": 999,
  "totalPrice": 15000,
  "status": "ORDER_PLACED"
}

> {%
    client.test("Status code is 404", function() {
        client.assert(response.status === 404);
    });
%}

### 주문 생성 - 고객이 존재하지 않음
POST {{BASE_URL}}/api/orders
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "storeId": 1,
  "customerId": 999,
  "menuId": 1,
  "minOrderPrice": 15000,
  "status": "ORDER_PLACED"
}

> {%
    client.test("Status code is 404", function() {
        client.assert(response.status === 404);
    });
%}

### 주문 생성 - 주문 금액이 최소 금액보다 적음
POST {{BASE_URL}}/api/orders
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "storeId": 1,
  "customerId": 1,
  "menuId": 1,
  "totalPrice": 500,
  "status": "ORDER_PLACED"
}

> {%
    client.test("Status code is 400", function() {
        client.assert(response.status === 400);
    });
%}

### 주문 생성 - 가게가 영업시간이 아님 (stroe -> closeTime 설정 후 테스트 혹은 더미데이터 추천)
POST {{BASE_URL}}/api/orders
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "storeId": 1,
  "customerId": 1,
  "menuId": 1,
  "totalPrice": 15000,
  "status": "ORDER_PLACED"
}

> {%
    client.test("Status code is 400", function() {
        client.assert(response.status === 400);
    });
%}

### 주문 생성 - 고객 토큰 없이 주문 요청 시도
POST {{BASE_URL}}/api/orders
Content-Type: application/json

{
  "storeId": 1,
  "customerId": 1,
  "menuId": 1,
  "totalPrice": 15000,
  "status": "ORDER_PLACED"
}

> {%
    client.test("Status code is 401", function() {
        client.assert(response.status === 401);
    });
%}

### 주문 생성 - 비정상적인 총 금액으로 주문 요청 (음수 금액으로 주문 요청)
POST {{BASE_URL}}/api/orders
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

{
  "storeId": 1,
  "customerId": 1,
  "menuId": 1,
  "totalPrice": -10000,
  "status": "ORDER_PLACED"
}

> {%
    client.test("Status code is 400", function() {
        client.assert(response.status === 400);
    });
%}


### 주문 상태 업데이트 - 주문 접수 상태에서 주문 확인 상태로 변경
PUT {{BASE_URL}}/api/orders/1/status?status=ORDER_CONFIRMED
Content-Type: application/json
Authorization: Bearer {{OWNER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 주문 상태 업데이트 - 주문 확인 상태에서 주문 준비 중 상태로 변경
PUT {{BASE_URL}}/api/orders/1/status?status=ORDER_PREPARING
Content-Type: application/json
Authorization: Bearer {{OWNER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 주문 상태 업데이트 - 주문 준비 중 상태에서 배달 중 상태로 변경
PUT {{BASE_URL}}/api/orders/1/status?status=ORDER_ON_THE_WAY
Content-Type: application/json
Authorization: Bearer {{OWNER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 주문 상태 업데이트 - 배달 중 상태에서 배달 완료 상태로 변경
PUT {{BASE_URL}}/api/orders/1/status?status=ORDER_DELIVERED
Content-Type: application/json
Authorization: Bearer {{OWNER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 주문 상태 업데이트 - 주문 접수 상태에서 주문 취소 상태로 변경
PUT {{BASE_URL}}/api/orders/1/status?status=ORDER_CANCELED
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 주문 상태 업데이트 - 주문 확인 상태에서 주문 취소 상태로 변경
PUT {{BASE_URL}}/api/orders/1/status?status=ORDER_CANCELED
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 주문 상태 업데이트 - 준비 중인 주문은 고객이 취소 불가
PUT {{BASE_URL}}/api/orders/1/status?status=ORDER_CANCELED
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 403", function() {
        client.assert(response.status === 403);
    });
%}

### 주문 상태 업데이트 - 배달 중인 주문은 취소 불가
PUT {{BASE_URL}}/api/orders/1/status?status=ORDER_CANCELED
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 400", function() {
        client.assert(response.status === 400);
    });
%}

### 주문 상태 업데이트 - 이미 배달 완료된 주문은 취소 불가
PUT {{BASE_URL}}/api/orders/1/status?status=ORDER_CANCELED
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 400", function() {
        client.assert(response.status === 400);
    });
%}

### 주문 상태 업데이트 - 상태가 비어있을 경우
PUT {{BASE_URL}}/api/orders/1/status?status=
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 400", function() {
        client.assert(response.status === 400);
    });
%}

### 주문 상태 업데이트 - 잘못된 상태값 전달
PUT {{BASE_URL}}/api/orders/1/status?status=이상해용
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 400", function() {
        client.assert(response.status === 400);
    });
%}

### 유저 전용 주문 조회
GET {{BASE_URL}}/api/orders/user/1?userId=1
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 사장님 전용 주문 조회
GET {{BASE_URL}}/api/orders/owner/1?ownerId=2
Content-Type: application/json
Authorization: Bearer {{OWNER_TOKEN}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200);
    });
%}

### 주문 조회 - 잘못된 권한 (유저가 사장님 조회 시도)
GET {{BASE_URL}}/api/orders/owner/1?ownerId=2
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 403", function() {
        client.assert(response.status === 403);
    });
%}

### 주문 조회 - 잘못된 권한 (사장님이 유저 조회 시도)
GET {{BASE_URL}}/api/orders/user/1?userId=1
Content-Type: application/json
Authorization: Bearer {{OWNER_TOKEN}}

> {%
    client.test("Status code is 403", function() {
        client.assert(response.status === 403);
    });


### 주문 조회 - 만료된 토큰
GET {{BASE_URL}}/api/orders/user/1?userId=1
Content-Type: application/json
Authorization: Bearer {{EXPIRED_AUTH_TOKEN}}

> {%
    client.test("Status code is 401", function() {
        client.assert(response.status === 401);
    });
%}

### 주문 조회 - 주문 ID가 존재하지 않을 경우
GET {{BASE_URL}}/api/orders/user/999?userId=1
Content-Type: application/json
Authorization: Bearer {{USER_TOKEN}}

> {%
    client.test("Status code is 404", function() {
        client.assert(response.status === 404);
    });
%}



